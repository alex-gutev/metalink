## Unit Tests for Core Module List Meta-Nodes

/module(list-tests)
/import(tridash-unit)
/import(core)

## Definitions

Fail-Type  <- &(Fail-Type)
Fail-Type! <- fail(Fail-Type)

l1 <- cons(1, cons(2, Empty))
l2 <- list(11, 12, 13)
l3 <- list*("a", "b", list("c", "d"))

malformed <- cons(1, 2)


## Tests

### Lists Tests Group

all-tests <-
    group(
        "Lists"

        , access-tests
        , cons?-tests
        , list!-tests
        , nth-tests
        , append-tests
        , foldl'-tests
        , foldl-tests
        , foldr-tests
        , map-tests
        , filter-tests
        , every?-tests
        , some?-tests
        , not-any?-tests
        , not-every?-tests
    )

/export(all-tests)


### Test `cons`, `list`, `list*`, `head` and `tail`

group(
    "Meta-Nodes: `head` and `tail`",

    group(
        "Constructed using `cons`",

        test-equal(head(l1), 1, "head([1, 2])"),
        test-equal(head(tail(l1)), 2, "head(tail([1, 2]))"),

        test-equal(tail(tail(l1)), Empty, "tail(tail([1, 2]))")
    ),

    group(
        "Constructed using `list`",

        test-equal(head(l2), 11, "head([11, 12, 13])"),
        test-equal(head(tail(l2)), 12, "head(tail([11, 12, 13]))"),
        test-equal(head(tail(tail(l2))), 13, "head(tail(tail([11, 12, 13])))"),

        test-equal(tail(tail(tail(l2))), Empty, "head(tail(tail([11, 12, 13])))")
    ),

    group(
        "Constructed using `list*`",

        test-equal(head(l3), "a", "head([\"a\", \"b\", \"c\", \"d\"])"),
        test-equal(head(tail(l3)), "b", "head(tail([\"a\", \"b\", \"c\", \"d\"]))"),
        test-equal(head(tail(tail(l3))), "c", "head(tail(tail([\"a\", \"b\", \"c\", \"d\"])))"),
        test-equal(head(tail(tail(tail(l3)))), "d", "head(tail(tail(tail([\"a\", \"b\", \"c\", \"d\"]))))"),

        test-equal(tail(tail(tail(tail(l3)))), Empty, "tail(tail(tail([\"a\", \"b\", \"c\", \"d\"])))")
    ),

    group(
        "Empty Lists",

        test-fails?(head(Empty), "head([])", Empty),
        test-fails?(tail(Empty), "tail([])", Empty),

        test-fails?(head(list()), "head(list())", Empty),
        test-fails?(tail(list()), "tail(list())", Empty)
    ),

    group(
        "Malformed Lists and Invalid Types",

        test-fails?(tail(malformed), "tail(cons(1, 2))", Type-Error),

        test-fails?(head(1), "head(1)", Type-Error),
        test-fails?(tail(1), "tail(1)", Type-Error),

        test-fails?(head('(x)), "head('(x))", Type-Error),
        test-fails?(tail('(x)), "tail('(x))", Type-Error),

        test-fails?(head("x"), "head(\"x\")", Type-Error),
        test-fails?(tail("x"), "tail(\"x\")", Type-Error)
    ),

    group(
        "Failure Propagation",

        test-fails?(head(Fail-Type!), "head(Fail-Type!)", Fail-Type),
        test-fails?(tail(Fail-Type!), "tail(Fail-Type!)", Fail-Type),

        test-fails?(head(cons(Fail-Type!, Empty!)), "head([Fail-Type!])", Fail-Type),
        test-fails?(tail(cons(Invalid-Integer!, Fail-Type!)), "tail(cons(Invalid-Integer!, Fail-Type!))", Fail-Type)
    )

) -> access-tests


### Test `cons?`

1 -> object.head
2 -> object.tail

group(
    "Meta-Node `cons?`",

    test(cons?(cons(1,cons(2,Empty))), "cons?(cons(1,cons(2,Empty)))"),
    test(cons?(list(1,2,3)), "cons?(list(1,2,3))"),

    test-not(cons?(1), "cons?(1)"),
    test-not(cons?('(x)), "cons?('(x))"),
    test-not(cons?("abc"), "cons?(\"abc\")"),
    test-not(cons?(object), "cons?(object)"),

    test-fails?(cons?(Fail-Type!), "cons?(Fail-Type!)", Fail-Type)
) -> cons?-tests


### Test `list!`

l1! <- list!(1, 2, 3)

group(
    "Meta-Node `list!`",

    test-not-fails?(list(1, 2, Fail-Type!), "list(1, 2, Fail-Type!)"),
    test-fails?(list!(1, 2, Fail-Type!), "list!(1, 2, Fail-Type!)", Fail-Type),

    test-equal(head(l1!), 1, "head(list!(1, 2, 3))"),
    test-equal(head(tail(l1!)), 2, "head(tail(list!(1, 2, 3)))"),
    test-equal(head(tail(tail(l1!))), 3, "head(tail(tail(list!(1, 2, 3))))")
) -> list!-tests


### Test `nth`

group(
    "Meta-Node `nth`",

    group(
        "Within Range",

        test-equal(nth(l1, 0), 1, "nth([1, 2], 0)"),
        test-equal(nth(l1, 1), 2, "nth([1, 2], 1)"),

        test-equal(nth(l2, 0), 11, "nth([11, 12, 13]"),
        test-equal(nth(l2, 1), 12, "nth([11, 12, 13]"),
        test-equal(nth(l2, 2), 13, "nth([11, 12, 13]"),

        test-equal(nth(l3, 0), "a", "nth([\"a\", \"b\", \"c\", \"d\"])"),
        test-equal(nth(l3, 1), "b", "nth([\"a\", \"b\", \"c\", \"d\"])"),
        test-equal(nth(l3, 2), "c", "nth([\"a\", \"b\", \"c\", \"d\"])"),
        test-equal(nth(l3, 3), "d", "nth([\"a\", \"b\", \"c\", \"d\"])")
    ),

    group(
        "Out of Range",

        test-fails?(nth(l1, -1), "nth([1, 2], -1)", Index-Out-Bounds),
        test-fails?(nth(l1, 2), "nth([1, 2], 2)", Index-Out-Bounds),
        test-fails?(nth(l1, 10), "nth([1, 2], 10)", Index-Out-Bounds),

        test-fails?(nth(l2, 3), "nth([11, 13, 13], 3)", Index-Out-Bounds),
        test-fails?(nth(l3, 4), "nth([\"a\", \"b\", \"c\", \"d\"])", Index-Out-Bounds),

        test-fails?(nth(Empty, 0), "nth(Empty, 0)", Index-Out-Bounds)
    ),

    group(
        "Failure Propagation",

        test-fails?(nth(Fail-Type!, 10), "nth(Fail-Type!, 10)", Fail-Type),
        test-fails?(nth(list(1, Fail-Type!), 1), "nth([1, Fail-Type!])", Fail-Type),
        test-fails?(nth(list(1, 2, Fail-Type!, 3), 2), "nth([1, 2, Empty!, 3])", Fail-Type)
    )
) -> nth-tests


### Test `append`

l1+l2 <- append(l1, l2)

l+Empty <- append(list(1), Empty)
Empty+l <- append(Empty, list("x"))
Empty+Empty <- append(Empty, Empty)

group(
    "Meta-Node `append`",

    group(
        "Non-Empty Lists",

        test-equal(nth(l1+l2, 0), 1, "nth(append([1,2], [11,12,13]), 0)"),
        test-equal(nth(l1+l2, 1), 2, "nth(append([1,2], [11,12,13]), 1)"),
        test-equal(nth(l1+l2, 2), 11, "nth(append([1,2], [11,12,13]), 2)"),
        test-equal(nth(l1+l2, 3), 12, "nth(append([1,2], [11,12,13]), 3)"),
        test-equal(nth(l1+l2, 4), 13, "nth(append([1,2], [11,12,13]), 4)"),

        test-fails?(nth(l1+l2, 5), "nth(append([1,2], [11,12,13]), 5)", Index-Out-Bounds)
    ),

    group(
        "Empty Lists",

        test-equal(nth(l+Empty, 0), 1, "nth(append([1], []), 0)"),
        test-equal(tail(l+Empty), Empty, "tail(append([1], []))"),

        test-equal(nth(Empty+l, 0), "x", "nth(append([], [\"x\"]), 0)"),
        test-equal(tail(Empty+l), Empty, "tail(append([], [\"x\"]))"),

        test-equal(Empty+Empty, Empty, "append([], [])")
    ),

    group(
        "Malformed Lists",

        test-fails?(tail(append(cons(1, 2), list(3, 4))), "tail(append(cons(1, 2), [3, 4]))", Type-Error),
        test-fails?(tail(tail(append(list(1), cons(2, 3)))), "tail(tail(append(list(1), cons(2, 3))))", Type-Error),

        test-fails?(append("x", list(1, 2)), "append(\"x\", list(1, 2))", Type-Error),
        test-fails?(tail(append(list(1), "x")), "tail(append(list(1), \"x\"))", Type-Error)
    ),

    group(
        "Failure Propagation",

        test-fails?(append(Fail-Type!, list(1, 2)), "append(Fail-Type!, list(1, 2))", Fail-Type),
        test-fails?(tail(append(list(1), Fail-Type!)), "tail(append(list(1, 2), Fail-Type!))", Fail-Type),
        test-fails?(nth(append(list(1), list(2, Fail-Type!)), 2), "nth(append(list(1), list(2, Fail-Type!)), 2)", Fail-Type)
    )
) -> append-tests


### Test `fold'`

f(x, y) : if (x = y, x, Fail-Type!)

group(
    "Meta-Node `foldl'`",

    group(
        "Proper Lists",

        test-equal(foldl'(0, +, list(1,2,3)), 6, "foldl'(0, +, [1,2,3])"),
        test-equal(foldl'(1, +, list(1,2,3)), 7, "foldl'(1, +, [1,2,3])"),
        test-equal(foldl'(10, -, list(5, 4)), 1, "fold'(10, -, [5, 4])")
    ),

    group(
        "Empty Lists",

        test-equal(foldl'(15, +, Empty), 15, "foldl'(15, +, Empty!)"),
        test-equal(foldl'(15, +, list()), 15, "foldl'(15, +, Empty!)")
    ),

    group(
        "Malformed Lists",

        test-fails?(foldl'(0, +, '(x)), "fold'(0, +, '(x))", Type-Error),
        test-fails?(foldl'(0, +, "abc"), "fold'(0, +, \"abc\")", Type-Error),
        test-fails?(foldl'(0, +, cons(1, 2)), "foldl'(0, +, cons(1,2))", Type-Error)
    ),

    group(
        "Failure Propagation",

        test-fails?(foldl'(Fail-Type!, +, list(1,2,3)), "foldl'(Fail-Type!, +, [1,2,3]))", Fail-Type),
        test-fails?(foldl'(1, +, list(1,Fail-Type!,3)), "foldl'(1, +, [1,Fail-Type!,3]))", Fail-Type),
        test-fails?(foldl'(1, +, Fail-Type!), "foldl'(1, +, Fail-Type!)", Fail-Type),
        test-fails?(foldl'(0, f, list(1)), "foldl'(1, f, [1])", Fail-Type)
    )
) -> foldl'-tests


### Test `fold`

group(
    "Meta-Node `foldl`",

    group(
        "Proper Lists",

        test-equal(foldl(+, list(0,1,2,3)), 6, "foldl(+, [0,1,2,3])"),
        test-equal(foldl(+, list(1,1,2,3)), 7, "foldl(+, [1,1,2,3])"),
        test-equal(foldl(-, list(6, 5, 4)), -3, "foldl(-, [6, 5, 4])")
    ),

    group(
        "Empty Lists",

        test-fails?(foldl(+, Empty), "foldl(+, Empty!)", Empty),
        test-fails?(foldl(+, list()), "foldl(+, Empty!)", Empty)
    ),

    group(
        "Malformed Lists",

        test-fails?(foldl(+, '(x)), "fold(+, '(x))", Type-Error),
        test-fails?(foldl(+, "abc"), "fold(+, \"abc\")", Type-Error),
        test-fails?(foldl(+, cons(1, 2)), "fold(+, cons(1,2))", Type-Error)
    ),

    group(
        "Failure Propagation",

        test-fails?(foldl(Fail-Type!, list(1, 2)), "foldl(Fail-Type!, [1])", Fail-Type),
        test-fails?(foldl(+, Fail-Type!), "foldl(+, Fail-Type!)", Fail-Type),
        test-fails?(foldl(+, list(1, Fail-Type!, 2)), "foldl(+, [1, Fail-Type!, 2])", Fail-Type),
        test-fails?(foldl(f, list(1, 2)), "foldl(f, [1])", Fail-Type)
    )

) -> foldl-tests


### Test `foldr`

group(
    "Meta-Node `foldlr`",

    group(
        "Proper Lists",

        test-equal(foldr(+, list(1,2,3)), 6, "foldr(+, [0,1,2,3])"),
        test-equal(foldr(+, list(1,2,3), 1), 7, "foldr(+, [1,1,2,3], 1)"),
        test-equal(foldr(-, list(6, 5, 4)), 5, "foldr(-, [6, 5, 4])")
    ),

    group(
        "Empty Lists",

        test-equal(foldr(+, Empty, "x"), "x", "foldr(+, Empty!, \"x\")"),
        test-fails?(foldr(+, Empty), "foldr(+, Empty!)", Empty),

        test-equal(foldr(+, list(), "x"), "x", "foldr(+, Empty!, \"x\")"),
        test-fails?(foldr(+, list()), "foldr(+, Empty!)", Empty)
    ),

    group(
        "Malformed Lists",

        test-fails?(foldr(+, '(x)), "foldr(+, '(x))", Type-Error),
        test-fails?(foldr(+, "abc"), "foldr(+, \"abc\")", Type-Error),
        test-fails?(foldr(+, cons(1, 2)), "foldr(+, cons(1,2))", Type-Error)
    ),

    group(
        "Failure Propagation",

        test-fails?(foldr(Fail-Type!, list(1, 2)), "foldr(Fail-Type!, [1])", Fail-Type),
        test-fails?(foldr(+, Fail-Type!), "foldr(+, Fail-Type!)", Fail-Type),
        test-fails?(foldr(+, list(1, Fail-Type!, 3)), "foldr(+, [1, Fail-Type!, 3])", Fail-Type),
        test-fails?(foldr(+, list(1, 2, 3), Fail-Type!), "foldr(+, [1, 2, 3], Fail-Type!)", Fail-Type),
        test-fails?(foldr(f, list(1, 2)), "foldr(f, [1])", Fail-Type)
    )

) -> foldr-tests


### Test `map`

map1 <- map(-, list(1, 2, 3))
inc(x) : x + 1

id(x) : x

group(
    "Meta-Node `map`",

    group(
        "Proper Lists",

        test-equal(nth(map1, 0), -1, "nth(map(-, [1,2,3]), 0)"),
        test-equal(nth(map1, 1), -2, "nth(map(-, [1,2,3]), 1)"),
        test-equal(nth(map1, 2), -3, "nth(map(-, [1,2,3]), 2)"),
        test-equal(tail(tail(tail(map1))), Empty, "tail(tail(tail(map(-, [1,2,3]))))"),

        test-equal(head(map(inc, list(1))), 2, "head(map(inc, list(1)))")
    ),

    group(
        "Empty Lists",

        test-equal(map(+, Empty), Empty, "map(+, Empty!)"),
        test-equal(map(-, Empty), Empty, "map(-, Empty!)"),
        test-equal(map(inc, Empty), Empty, "map(inc, Empty!)"),

        test-equal(map(+, list()), Empty, "map(+, Empty!)")
    ),

    group(
        "Malformed Lists",

        test-fails?(tail(map(-, '(x))), "map(-, '(x))", Type-Error),
        test-fails?(tail(map(-, "abc")), "map(-, \"abc\")", Type-Error),
        test-fails?(tail(map(-, cons(1, 2))), "map(-, cons(1, 2))", Type-Error)
    ),

    group(
        "Failure Propagation",

        test-fails?(head(map(Fail-Type!, list(1,2,3))), "head(map(Fail-Type!, [1,2,3]))", Fail-Type),
        test-fails?(map(id, Fail-Type!), "map(id, Fail-Type!)", Fail-Type),

        test-equal(head(map(id, list(1, Fail-Type!))), 1, "head(map(id, [1,Fail-Type!]))"),
        test-fails?(nth(map(id, list(1, Fail-Type!)), 1), "nth(map(id, [1,Fail-Type!]), 1)", Fail-Type)
    )
) -> map-tests


### Test `filter`

is-even?(x) : x % 2 = 0

filter1 <- filter(is-even?, list(1, 2, 3, 4))

group(
    "Meta-Node `filter`",

    group(
        "Proper Lists",

        test-equal(nth(filter1, 0), 2, "nth(filter(is-even?, [1,2,3,4]), 0)"),
        test-equal(nth(filter1, 1), 4, "nth(filter(is-even?, [1,2,3,4]), 1)"),

        test-equal(tail(tail(filter1)), Empty, "tail(tail(filter(is-even?, [1,2,3,4])))"),
        test-equal(filter(is-even?, list(1,3,5,7,9)), Empty, "filter(is-even?, [1,3,5,7,9])")
    ),

    group(
        "Empty Lists",

        test-equal(filter(is-even?, Empty), Empty, "filter(is-even?, Empty!)")
    ),

    group(
        "Malformed Lists",

        test-fails?(tail(filter(is-even?, '(x))), "filter(is-even?, '(x))", Type-Error),
        test-fails?(tail(filter(is-even?, "abc")), "filter(is-even?, \"abc\")", Type-Error),
        test-fails?(tail(filter(is-even?, cons(2, 4))), "filter(is-even?, cons(2, 4))", Type-Error)
    ),

    group(
        "Failure Propagation",

        test-fails?(filter(Fail-Type!, list(1,2,3)), "filter(Fail-Type!, [1,2,3])", Fail-Type),
        test-fails?(filter(is-even?, Fail-Type!), "filter(is-even? Fail-Type!)", Fail-Type),
        test-fails?(filter(is-even?, list(1, Fail-Type!, 3)), "filter(is-even?, [1, Fail-Type!, 3])", Fail-Type)
    )
) -> filter-tests


### Test `every?`

group(
    "Meta-Node `every?`",

    group(
        "Proper Lists",

        test(every?(is-even?, list(0,2,4,6)), "every?(is-even?, [0,2,4,6])"),
        test-not(every?(is-even?, list(1,2,3,4)), "every?(is-even?, [1,2,3,4])")
    ),

    group(
        "Empty Lists",

        test(every?(is-even?, Empty), "every?(is-even?, Empty)")
    ),

    group(
        "Malformed Lists",

        test-fails?(every?(is-even?, '(x)), "every?(is-even?, '(x))", Type-Error),
        test-fails?(every?(is-even?, "abc"), "every?(is-even?, \"abc\")", Type-Error),
        test-fails?(every?(is-even?, cons(1, 2)), "every?(is-even?, cons(1, 2))", Type-Error)
    ),

    group(
        "Failure Propagation",

        test-fails?(every?(Fail-Type!, list(1,2,3)), "every?(Fail-Type!, list(1,2,3))", Fail-Type),
        test-fails?(every?(is-even?, Fail-Type!), "every?(is-even?, Fail-Type!)", Fail-Type),
        test-fails?(every?(is-even?, list(1, Fail-Type!, 3)), "every?(is-even?, list(1, Fail-Type!, 3))", Fail-Type)
    )
) -> every?-tests


### Test `some?`

group(
    "Meta-Node `some?`",

    group(
        "Proper Lists",

        test(some?(is-even?, list(0,2,4,6)), "some?(is-even?, [0,2,4,6])"),
        test(some?(is-even?, list(1,2,3,4)), "some?(is-even?, [1,2,3,4])"),
        test-not(some?(is-even?, list(1,3,5)), "some?(is-even?, [1,3,5])")
    ),

    group(
        "Empty Lists",

        test-not(some?(is-even?, Empty), "some?(is-even?, Empty)")
    ),

    group(
        "Malformed Lists",

        test-fails?(some?(is-even?, '(x)), "some?(is-even?, '(x))", Type-Error),
        test-fails?(some?(is-even?, "abc"), "some?(is-even?, \"abc\")", Type-Error),
        test-fails?(some?(is-even?, cons(1, 2)), "some?(is-even?, cons(1, 2))", Type-Error)
    ),

    group(
        "Failure Propagation",

        test-fails?(some?(Fail-Type!, list(1,2,3)), "some?(Fail-Type!, list(1,2,3))", Fail-Type),
        test-fails?(some?(is-even?, Fail-Type!), "some?(is-even?, Fail-Type!)", Fail-Type),
        test-fails?(some?(is-even?, list(1, Fail-Type!, 3)), "some?(is-even?, list(1, Fail-Type!, 3))", Fail-Type)
    )
) -> some?-tests


### Test `not-any?`

group(
    "Meta-Node `not-any?`",

    group(
        "Proper Lists",

        test-not(not-any?(is-even?, list(0,2,4,6)), "not-any?(is-even?, [0,2,4,6])"),
        test-not(not-any?(is-even?, list(1,2,3,4)), "not-any?(is-even?, [1,2,3,4])"),
        test(not-any?(is-even?, list(1,3,5)), "not-any?(is-even?, [1,3,5])")
    ),

    group(
        "Empty Lists",

        test(not-any?(is-even?, Empty), "not-any?(is-even?, Empty)")
    ),

    group(
        "Malformed Lists",

        test-fails?(not-any?(is-even?, '(x)), "not-any?(is-even?, '(x))", Type-Error),
        test-fails?(not-any?(is-even?, "abc"), "not-any?(is-even?, \"abc\")", Type-Error),
        test-fails?(not-any?(is-even?, cons(1, 2)), "not-any?(is-even?, cons(1, 2))", Type-Error)
    ),

    group(
        "Failure Propagation",

        test-fails?(not-any?(Fail-Type!, list(1,2,3)), "not-any?(Fail-Type!, list(1,2,3))", Fail-Type),
        test-fails?(not-any?(is-even?, Fail-Type!), "not-any?(is-even?, Fail-Type!)", Fail-Type),
        test-fails?(not-any?(is-even?, list(1, Fail-Type!, 3)), "not-any?(is-even?, list(1, Fail-Type!, 3))", Fail-Type)
    )
) -> not-any?-tests


### Test `not-every?`

group(
    "Meta-Node `not-every?`",

    group(
        "Proper Lists",

        test-not(not-every?(is-even?, list(0,2,4,6)), "not-every?(is-even?, [0,2,4,6])"),
        test(not-every?(is-even?, list(1,2,3,4)), "not-every?(is-even?, [1,2,3,4])"),
        test(not-every?(is-even?, list(1,3,5)), "not-every?(is-even?, [1,3,5])")
    ),

    group(
        "Empty Lists",

        test-not(not-every?(is-even?, Empty), "not-every?(is-even?, Empty)")
    ),

    group(
        "Malformed Lists",

        test-fails?(not-every?(is-even?, '(x)), "not-every?(is-even?, '(x))", Type-Error),
        test-fails?(not-every?(is-even?, "abc"), "not-every?(is-even?, \"abc\")", Type-Error),
        test-fails?(not-every?(is-even?, cons(1, 2)), "not-every?(is-even?, cons(1, 2))", Type-Error)
    ),

    group(
        "Failure Propagation",

        test-fails?(not-every?(Fail-Type!, list(1,2,3)), "not-every?(Fail-Type!, list(1,2,3))", Fail-Type),
        test-fails?(not-every?(is-even?, Fail-Type!), "not-every?(is-even?, Fail-Type!)", Fail-Type),
        test-fails?(not-every?(is-even?, list(1, Fail-Type!, 3)), "not-every?(is-even?, list(1, Fail-Type!, 3))", Fail-Type)
    )
) -> not-every?-tests
