## Unit Tests for Core Module Comparison Functions

/module(comparison-tests)
/import(tridash-unit)
/import(core)


## Definitions

Fail-Type  <- &(Fail-Type)
Fail-Type! <- fail(Fail-Type)

1 -> object.x
2 -> object.y

f(x) : x

## Tests

### Arithmetic Test Group

all-tests <-
    group(
        "Comparison Tests"
        , <-tests
        , <=-tests
        , >-tests
        , >=-tests
        , =-tests
        , !=-tests
    )

/export(all-tests)


### Test `<`

group(
    "Meta-Node: `<`",

    group(
        "Valid Input",
        test(1 < 2, "1 < 2"),
        test(-1 < 3, "-1 < 3"),
        test(1.5 < 2.8, "1.5 < 2.8"),
        test(1 < 1.3, "1 < 1.3"),

        test-not(5 < 3, "5 < 3"),
        test-not(6 < -8, "6 < -8"),
        test-not(1 < 1, "1 < 1"),
        test-not(5.6 < 1.2, " 5.6 < 1.2"),
        test-not(2.0 < 2, "2.0 < 2")
    ),

    group(
        "Invalid Types",
        test-fails?("3" < 3, "\"3\" < 3", Type-Error),
        test-fails?(10 < '(x), "10 < '(x)", Type-Error),
        test-fails?(4 < c(4), "4 < c(4)", Type-Error),
        test-fails?("1" < "2", "\"1\" < \"2\"", Type-Error),
        test-fails?(object < 1, "object < 1", Type-Error),
        test-fails?(2 < f, "2 < meta-node-ref", Type-Error),
        test-fails?(2 < Fail-Type, "2 < &(Fail-Type)", Type-Error)
    ),

    group(
        "Failure Propagation",
        test-fails?(Fail-Type! < 1, "Fail-Type! < 1", Fail-Type),
        test-fails?(1 < Fail-Type!, "1 < Fail-Type!", Fail-Type)
    )
) -> <-tests

### Test `<=`

group(
    "Meta-Node: `<=`",

    group(
        "Valid Input",

        test(1 <= 2, "1 < 2"),
        test(3 <= 3, "3 <= 3"),
        test(-1 <= 3, "-1 < 3"),
        test(1.5 <= 2.8, "1.5 < 2.8"),
        test(1 <= 1.3, "1 <= 1.3"),
        test(1.0 <= 1, "1.0 <= 1"),

        test-not(5 <= 3, "5 <= 3"),
        test-not(6 <= -8, "6 <= -8"),
        test-not(5.6 <= 1.2, " 5.6 <= 1.2")
    ),

    group(
        "Invalid Types",
        test-fails?("3" <= 3, "\"3\" <= 3", Type-Error),
        test-fails?(10 <= '(x), "10 <= '(x)", Type-Error),
        test-fails?(4 <= c(4), "4 <= c(4)", Type-Error),
        test-fails?("1" <= "2", "\"1\" <= \"2\"", Type-Error),
        test-fails?(object <= 1, "object <= 1", Type-Error),
        test-fails?(2 <= f, "2 <= meta-node-ref", Type-Error),
        test-fails?(2 <= Fail-Type, "2 <= &(Fail-Type)", Type-Error)
    ),

    group(
        "Failure Propagation",
        test-fails?(Fail-Type! <= 1, "Fail-Type! <= 1", Fail-Type),
        test-fails?(1 <= Fail-Type!, "1 <= Fail-Type!", Fail-Type)
    )
) -> <=-tests

### Test `>`

group(
    "Meta-Node: `>`",

    group(
        "Valid Input",

        test(2 > 1, "2 > 1"),
        test(3 > -1, "3 > -1"),
        test(3.7 > 2.8, "3.7 > 2.8"),
        test(1.3 > 1, "1.3 > 1"),

        test-not(3 > 5, "3 > 5"),
        test-not(-8 > 6, "-8 > 6"),
        test-not(4 > 4, "4 > 4"),
        test-not(5.6 > 10.2, " 5.6 > 10.2"),
        test-not(2.0 > 2, "2.0 > 2.0")
    ),

    group(
        "Invalid Types",

        test-fails?("3" > 3, "\"3\" > 3", Type-Error),
        test-fails?(10 > '(x), "10 > '(x)", Type-Error),
        test-fails?(4 > c(4), "4 > c(4)", Type-Error),
        test-fails?("1" > "2", "\"1\" > \"2\"", Type-Error),
        test-fails?(object > 1, "object > 1", Type-Error),
        test-fails?(2 > f, "2 > meta-node-ref", Type-Error),
        test-fails?(2 > Fail-Type, "2 > &(Fail-Type)", Type-Error)),

    group(
        "Failure Propagation",
        test-fails?(Fail-Type! > 1, "Fail-Type! > 1", Fail-Type),
        test-fails?(1 > Fail-Type!, "1 > Fail-Type!", Fail-Type)
    )
) -> >-tests

### Test `>=`

group(
    "Meta-Node: `>=`",

    group(
        "Valid Input",

        test(2 >= 1, "2 >= 1"),
        test(3 >= -1, "3 >= -1"),
        test(5 >= 5, "5 >= 5"),
        test(3.7 >= 2.8, "3.7 >= 2.8"),
        test(1.3 >= 1, "1.3 >= 1"),
        test(3.0 >= 3, "3.0 >= 3"),

        test-not(3 >= 5, "3 >= 5"),
        test-not(-8 >= 6, "-8 >= 6"),
        test-not(5.6 >= 10.2, " 5.6 >= 10.2")
    ),

    group(
        "Invalid Types",
        test-fails?("3" >= 3, "\"3\" >= 3", Type-Error),
        test-fails?(10 >= '(x), "10 >= '(x)", Type-Error),
        test-fails?(4 >= c(4), "4 >= c(4)", Type-Error),
        test-fails?("1" >= "2", "\"1\" >= \"2\"", Type-Error),
        test-fails?(object >= 1, "object >= 1", Type-Error),
        test-fails?(2 >= f, "2 >= meta-node-ref", Type-Error),
        test-fails?(2 >= Fail-Type, "2 >= &(Fail-Type)", Type-Error)
    ),

    group(
        "Failure Propagation",
        test-fails?(Fail-Type! >= 1, "Fail-Type! >= 1", Fail-Type),
        test-fails?(1 >= Fail-Type!, "1 >= Fail-Type!", Fail-Type)
    )
) -> >=-tests

### Test `=`

group(
    "Meta-Node: `=`",

    group(
        "Numbers",
        test(1 = 1, "1 = 1"),
        test(5 = 5, "5 = 5"),
        test(2.5 = 2.5, "2.5 = 2.5"),
        test(1.0 = 1, "1.0 = 1"),

        test-not(1 = 2, "1 = 2"),
        test-not(1.2 = 1.7, "1.2 = 1.7")
    ),

    group(
        "Characters",
        test(c(1) = c(1), "c(1) = c(1)"),
        test(c("\n") = c("\n"), "c(\"\\n\") = c(\"\\n\")"),
        test(c(x) = c(x), "c(x) = c(x)"),

        test-not(c(1) = c(2), "c(1) = c(2)"),
        test-not(c("\n") = c("\t"), "c(\"\\n\") = c(\"\\t\")"),
        test-not(c(x) = c(X), "c(x) = c(X)")
    ),

    group(
        "Strings",
        test("hello" = "hello", "\"hello\" = \"hello\""),
        test("ABC" = "ABC", "\"ABC\" = \"ABC\""),
        test("" = "", "\"\" = \"\""),

        test-not("Hello" = "hello", "\"Hello\" = \"hello\""),
        test-not("aBc" = "abc", "\"aBc\" = \"abc\""),
        test-not("hello" = "bye", "\"hello\" = \"bye\"")
    ),

    group(
        "Other Objects",

        test(Fail-Type = Fail-Type, "Fail-Type = Fail-Type"),
        test('(abc) = '(abc), "'(abc) = '(abc)"),

        test-not(f = test, "Meta-Node-Ref<f> = Meta-Node-Ref<test>"),
        test-not(Type-Error = Fail-Type, "Meta-Node-Ref<f> = Fail-Type"),
        test-not(1 = "1", "1 = \"1\""),
        test-not('(abc) = "abc", "'(abc) = \"abc\""),
        test-not('(a) = '(b), "'(a) = '(b)"),
        test-not('(x) = '(X), "'(x) = '(X)")
    ),

    group(
        "Failure Propagation",
        test-fails?(Fail-Type! = 1, "Fail-Type! = 1", Fail-Type),
        test-fails?(2 = Fail-Type!, "2 = Fail-Type!", Fail-Type),
        test-fails?(Fail-Type! = Fail-Type!, "Fail-Type! = Fail-Type!", Fail-Type)
    )
) -> =-tests

### Test `!=`

group(
    "Meta-Node: `!=`",

    group(
        "Numbers",
        test-not(1 != 1, "1 != 1"),
        test-not(5 != 5, "5 != 5"),
        test-not(2.5 != 2.5, "2.5 != 2.5"),
        test-not(1.0 != 1, "1.0 != 1"),

        test(1 != 2, "1 != 2"),
        test(1.2 != 1.7, "1.2 != 1.7")
    ),

    group(
        "Characters",

        test-not(c(1) != c(1), "c(1) != c(1)"),
        test-not(c("\n") != c("\n"), "c(\"\\n\") != c(\"\\n\")"),
        test-not(c(x) != c(x), "c(x) != c(x)"),

        test(c(1) != c(2), "c(1) != c(2)"),
        test(c("\n") != c("\t"), "c(\"\\n\") != c(\"\\t\")"),
        test(c(x) != c(X), "c(x) != c(X)")
    ),

    group(
        "Strings",

        test-not("hello" != "hello", "\"hello\" != \"hello\""),
        test-not("ABC" != "ABC", "\"ABC\" != \"ABC\""),
        test-not("" != "", "\"\" != \"\""),

        test("Hello" != "hello", "\"Hello\" != \"hello\""),
        test("aBc" != "abc", "\"aBc\" != \"abc\""),
        test("hello" != "bye", "\"hello\" != \"bye\"")
    ),

    group(
        "Other Objects",

        test-not(Fail-Type != Fail-Type, "Fail-Type != Fail-Type"),
        test-not('(abc) != '(abc), "'(abc) != '(abc)"),

        test(f != test, "Meta-Node-Ref<f> != Meta-Node-Ref<test>"),
        test(Type-Error != Fail-Type, "Meta-Node-Ref<f> != Fail-Type"),
        test(1 != "1", "1 != \"1\""),
        test('(abc) != "abc", "'(abc) != \"abc\""),
        test('(a) != '(b), "'(a) != '(b)"),
        test('(x) != '(X), "'(x) != '(X)")
    ),

    group(
        "Failure Propagation",
        test-fails?(Fail-Type! != 1, "Fail-Type! != 1", Fail-Type),
        test-fails?(2 != Fail-Type!, "2 != Fail-Type!", Fail-Type),
        test-fails?(Fail-Type! != Fail-Type!, "Fail-Type! != Fail-Type!", Fail-Type)
    )
) -> !=-tests
