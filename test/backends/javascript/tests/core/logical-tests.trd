## Unit Tests for Core Module Logical Operators

/module(logical-tests)
/import(tridash-unit)
/import(core)


## Definitions

Fail-Type  <- &(Fail-Type)
Fail-Type! <- fail(Fail-Type)

t <- 1 = 1
f <- 3 = 5

## Tests

### Logical Operator Test Group

all-tests <-
    group(
        "Logical Operator Tests"
        , and-tests
        , or-tests
        , not-tests
    )

/export(all-tests)


### Test `and`

group(
    "Meta-Node: `and`",

    group(
        "Valid Input",

        test(True and True, "True and True"),
        test-not(True and False, "True and False"),
        test-not(False and True, "False and True"),
        test-not(False and False, "False and False"),

        test(t and t, "1 = 1 and 1 = 1"),
        test-not(t and f, "1 = 1 and 3 = 5"),
        test-not(f and t, "3 = 5 and 1 = 1"),
        test-not(f and f, "3 = 5 and 3 = 5")
    ),

    group(
        "Failure Propagation",

        test-fails?(Fail-Type! and True, "Fail-Type! and True", Fail-Type),
        test-fails?(True and Fail-Type!, "True and Fail-Type!", Fail-Type),

        test-not(False and Fail-Type!, "False and Fail-Type!")
    )
) -> and-tests

### Test `or`

group(
    "Meta-Node: `or`",

    group(
        "Valid Input",

        test(True or True, "True or True"),
        test(True or False, "True or False"),
        test(False or True, "False or True"),
        test-not(False or False, "False or False"),

        test(t or t, "1 = 1 or 1 = 1"),
        test(t or f, "1 = 1 or 3 = 5"),
        test(f or t, "3 = 5 or 1 = 1"),
        test-not(f or f, "3 = 5 or 3 = 5")
    ),

    group(
        "Failure Propagation",

        test-fails?(Fail-Type! or True, "Fail-Type! or True", Fail-Type),
        test-fails?(False or Fail-Type!, "False or Fail-Type!", Fail-Type),

        test(True or Fail-Type!, "True or Fail-Type!")
    )
) -> or-tests

### Test `not`

group(
    "Meta-Node: `not`",

    group(
        "Valid Input",

        test(not(False), "not(False)"),
        test(not(not(True)), "Not not(True)"),

        test(not(f), "not(3 = 5)"),
        test(not(not(t)), "Not not(1 = 1)")
    ),

    group(
        "Failure Propagation",
        test-fails?(not(Fail-Type!), "not(Fail-Type!)", Fail-Type)
    )
) -> not-tests
