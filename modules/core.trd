### Tridash Core Module
###
### Contains meta-node stubs, and operator table, for the language
### primitives.

:module(core)
:import(builtin)

### Operators

## Basic Operators

:op(->, 10, right)
:op(:, 5, right)

:op(., 1000, left)


## Arithmetic Operators

:op(+, 100, left)
:op(-, 100, left)

:op(*, 200, left)
:op(/, 200, left)


## Comparison Operators

:op(<, 50)
:op(<=, 50)
:op(>, 50)
:op(>=, 50)
:op(=, 50)
:op(!=, 50)


## Logical Operators

:op(and, 25)
:op(or, 20)


### Metanode stubs for primitive operators

## Arithmetic and logical operators

:extern(+, -, *, /, <, <=, >, >=, =, !=, and, or, not)

:attribute(not, target-node, not)

:export(+, -, *, /, <, <=, >, >=, =, !=, and, or, not)


## Conditions

:extern(if)
:export(if, case)


## Type Conversions

:extern(int, real, string)

:attribute(int, target-node, int)
:attribute(real, target-node, real)
:attribute(string, target-node, string)

:export(int, real, string)


## Type Checks

:extern(int?, real?, string?)
:extern(inf?, NaN?)

:export(int?, real?, string?, inf?, NaN?)


### Standard Library

## Number Parsing

parse-int(x) : {
   int(x) -> i

   i -> self.value
   NaN?(i) -> self.fail
}

parse-real(x) : {
   real(x) -> r

   r -> self.value
   NaN?(r) -> self.fail
}

:export(parse-int, parse-real)


## Logical Operators

|-(cond, value) : case(cond : value)

:op(|-, 25, right)

:export(|-)