### Tridash Core Module
### Copyright (C) 2019  Alexander Gutev
###
### This program is free software: you can redistribute it and/or modify
### it under the terms of the GNU General Public License as published by
### the Free Software Foundation, either version 3 of the License, or
### (at your option) any later version.
###
### This program is distributed in the hope that it will be useful,
### but WITHOUT ANY WARRANTY; without even the implied warranty of
### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
### GNU General Public License for more details.
###
### You should have received a copy of the GNU General Public License
### along with this program.  If not, see <http://www.gnu.org/licenses/>.
###
### Linking this library statically or dynamically with other modules is
### making a combined work based on this library. Thus, the terms and
### conditions of the GNU General Public License cover the whole
### combination.
###
### As a special exception, the copyright holders of this library give
### you permission to link this library with independent modules to
### produce an executable, regardless of the license terms of these
### independent modules, and to copy and distribute the resulting
### executable under terms of your choice, provided that you also meet,
### for each linked independent module, the terms and conditions of the
### license of that module. An independent module is a module which is
### not derived from or based on this library. If you modify this
### library, you may extend this exception to your version of the
### library, but you are not obliged to do so. If you do not wish to do
### so, delete this exception statement from your version.

### Utility Macros

:module(core)

## Evaluates to the value corresponding to the first condition node
## that evaluates to true.
##
## Each element of `cases` is of the form:
##
##     condition : value
##
## where `condition` is the condition node and `value` is the value
## node. If `condition` evaluates to true, the `case` functor
## evaluates to the value of `value`. If `condition` evaluates to
## false, the next `case` in `cases` is tested.
##
## The final element of `cases` may comprise of just a `value` node,
## omitting the `condition` node and `:` operator. In this case the
## `value` node is interpreted as the default value to which the
## `case` functor evaluates if all `condition` nodes evaluate to
## false. If there is no default value, the `case` functor fails to
## evaluate a value.
##
## cases : List of cases of the form `condition : value`. The last
##         case may be of the form `value`.

case(..(cases)) : {
    make-case(case, else) : {
        case -> list('(:), condition, value)

        list!(&(if), condition, value, else) -> @(self)
        case -> @(self)
    }

    foldr(make-case, cases, list(&(fail)))
}
:attribute(case, macro, 1)

## Expands to a node which evaluates to the value of the functor node
## with operator `operator` and arguments `args`, only if all
## arguments succeed. If at least one of the arguments fails to
## evaluate to a value, the entire functor node fails to evaluate to a
## value.
##
## operator : The functor operator.
## args     : The functor arguments.

!(functor) : {
    make-fail-test(arg) :
        list(&(?), arg)

    make-check(arg, test) :
        list(&(and), arg, test)

    functor -> cons(operator, args)
    test <- foldr(make-check, map(make-fail-test, args))

    list(&(if), test, cons(operator, args))
}
:attribute(!, macro, 1)


### Export Declarations

:export(case, !)
