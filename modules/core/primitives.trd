### Tridash Core Module
### Copyright (C) 2019  Alexander Gutev
###
### This program is free software: you can redistribute it and/or modify
### it under the terms of the GNU General Public License as published by
### the Free Software Foundation, either version 3 of the License, or
### (at your option) any later version.
###
### This program is distributed in the hope that it will be useful,
### but WITHOUT ANY WARRANTY; without even the implied warranty of
### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
### GNU General Public License for more details.
###
### You should have received a copy of the GNU General Public License
### along with this program.  If not, see <http://www.gnu.org/licenses/>.
###
### Linking this library statically or dynamically with other modules is
### making a combined work based on this library. Thus, the terms and
### conditions of the GNU General Public License cover the whole
### combination.
###
### As a special exception, the copyright holders of this library give
### you permission to link this library with independent modules to
### produce an executable, regardless of the license terms of these
### independent modules, and to copy and distribute the resulting
### executable under terms of your choice, provided that you also meet,
### for each linked independent module, the terms and conditions of the
### license of that module. An independent module is a module which is
### not derived from or based on this library. If you modify this
### library, you may extend this exception to your version of the
### library, but you are not obliged to do so. If you do not wish to do
### so, delete this exception statement from your version.

### Language Primitives

:module(core)
:import(builtin)

### Quoting

# Interpret `thing` as a literal value rather than a node declaration.
#
# If `thing` is a node identifier symbol, returns the symbol.
# If `thing` is a node expression list, returns the list.
#
# `thing` : The node declaration to be interpreted literally.

'(thing) : list(:quote(:quote), thing)
:attribute(', macro, 1)

:export(')


### Binding

# Establish a binding from `src` to `target`
#
# `target` : The target node of the binding.
# `src`    : The source node of the binding.

<-(target, src) : list(&(->), src, target)
:attribute(<-, macro, 1)

:export(->, <-)


## Contexts

# Forces bindings involving `node`, as the target node, to be
# established in the explicit context with identifier `context`.
#
# The effect of this operator is limited to the binding of which the
# `@` expression appears as a target. If the expression does not
# appear as the target of a binding, the `@` operator has no effect
# and it is as though `node` is referenced directly.
#
# `context` may also be a functor of the form `catch(id, type)` where
# `id` is the context identifier and `type` is a failure type. If the
# preceding context of `node` fails with failure type equal to `type`
# then the binding to `node` takes effect. If the failure type is not
# equal to `type` then the binding is skipped, as though it has also
# failed with the same failure type.
#
# `node`    : The node identifier.
# `context` : A symbol serving as the explicit context identifier.

@(node, context) : {
    catch? <- cons?(context) and head(context) = '(when)
    catch-type <- head(tail(tail(context)))

    test-fn <- list(&(test-equal-function), catch-type)

    context-id <- if(catch?, head(tail(context)), context)
    catch-expr <- list('(:context), node, context-id, test-fn)
    expr <- list('(:context), node, context-id)

    if(catch?, catch-expr, expr)
}

# Returns a meta-node which takes a single argument and returns true
# if that argument is equal, by `=`, to `x`.
#
# x : The value to compare the meta-node argument to.

test-equal-function(x) : {
    test(y) : y = x
    test
}

:attribute(@, macro, 1)

when(..(args)) :
    fail("`when` may only appear within the context operand to the `@` operator.")

:export(@, when)


### Builtin Operators

# Export operators imported from the `builtin` module.

:export(:, ., &, c, .., prog)
:export(if, catch)
