### This Source Code Form is subject to the terms of the Mozilla Public
### License, v. 2.0. If a copy of the MPL was not distributed with this
### file, You can obtain one at https://mozilla.org/MPL/2.0/.
###
### Copyright (C) 2019 Alexander Gutev

### Tridash Core Module
###
### Language Primitives

:module(core)
:import(builtin)

### Quoting

# Interpret `thing` as a literal value rather than a node declaration.
#
# If `thing` is a node identifier symbol, returns the symbol.
# If `thing` is a node expression list, returns the list.
#
# `thing` : The node declaration to be interpreted literally.

'(thing) : list(:quote(:quote), thing)
:attribute(', macro, 1)

:export(')


### Binding

# Establish a binding from `src` to `target`
#
# `target` : The target node of the binding.
# `src`    : The source node of the binding.

<-(target, src) : list(&(->), src, target)
:attribute(<-, macro, 1)

:export(->, <-)


## Contexts

# Forces bindings involving `node`, as the target node, to be
# established in the explicit context with identifier `context`.
#
# The effect of this operator is limited to the binding of which the
# `@` expression appears as a target. If the expression does not
# appear as the target of a binding, the `@` operator has no effect
# and it is as though `node` is referenced directly.
#
# `context` may also be a functor of the form `catch(id, type)` where
# `id` is the context identifier and `type` is a failure type. If the
# preceding context of `node` fails with failure type equal to `type`
# then the binding to `node` takes effect. If the failure type is not
# equal to `type` then the binding is skipped, as though it has also
# failed with the same failure type.
#
# `node`    : The node identifier.
# `context` : A symbol serving as the explicit context identifier.

@(node, context) : {
    test-equal(x) : {
        test(y) : x = y
        test
    }

    catch? <- cons?(context) and head(context) = '(catch)
    catch-type <- head(tail(tail(context)))

    test-fn <- list(&(test-equal), catch-type)

    context-id <- if(catch?, head(tail(context)), context)
    catch-expr <- list('(:context), node, context-id, test-fn)
    expr <- list('(:context), node, context-id)

    if(catch?, catch-expr, expr)
}

:attribute(@, macro, 1)
:export(@)


### Builtin Operators

# Export operators imported from the `builtin` module.

:export(:, ., &, c, .., prog)
:export(if)
