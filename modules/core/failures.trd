### Tridash Core Module
### Copyright (C) 2019  Alexander Gutev
###
### This program is free software: you can redistribute it and/or modify
### it under the terms of the GNU General Public License as published by
### the Free Software Foundation, either version 3 of the License, or
### (at your option) any later version.
###
### This program is distributed in the hope that it will be useful,
### but WITHOUT ANY WARRANTY; without even the implied warranty of
### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
### GNU General Public License for more details.
###
### You should have received a copy of the GNU General Public License
### along with this program.  If not, see <http://www.gnu.org/licenses/>.
###
### Linking this library statically or dynamically with other modules is
### making a combined work based on this library. Thus, the terms and
### conditions of the GNU General Public License cover the whole
### combination.
###
### As a special exception, the copyright holders of this library give
### you permission to link this library with independent modules to
### produce an executable, regardless of the license terms of these
### independent modules, and to copy and distribute the resulting
### executable under terms of your choice, provided that you also meet,
### for each linked independent module, the terms and conditions of the
### license of that module. An independent module is a module which is
### not derived from or based on this library. If you modify this
### library, you may extend this exception to your version of the
### library, but you are not obliged to do so. If you do not wish to do
### so, delete this exception statement from your version.

### Utility meta-nodes for working with failure values

/module(core)


### Failure Checks

## Checks whether `x` fails.
##
## x : The value to check.
##
## Evaluates to true if `x` fails, false otherwise.

fails?(x) : {
    x and 0 -> @(self)
    1 -> @(self)
}

## Checks whether `x` fails with failure type `type`
##
## x    : The value to check.
## type : The failure type.
##
## Evaluates to true if `x` fails with failure type `type`, false
## otherwise.

fail-type?(x, type) : {
    fail-type(x) = type -> @(self)
    0 -> @(self)
}

## Checks whether `x` evaluates to a value.
##
## x : The value to check.
##
## Evaluates to true if `x` evaluates to a value, false if `x`
## fails.

?(x) : not(fails?(x))


## Checks whether `x` evaluates to a value.
##
## x : The value to check.
##
## Evaluates to true if `x` evaluates to a value (does not fail).
## If `x` fails, this node also fails.

!!(x) : not(x and 0)

## If `test` fails, the entire node fails with the same failure type,
## otherwise the node evaluates to `value`.
##
## test : The value which is tested for failure.
##
## value : The value to which, this node evaluates, if `test` does not
##         fail.

!-(test, value) : {
    !!(test) -> value -> self
}


### Builtin Failure Types

## Failure type indicating that an optional argument was not provided.

&(No-Value%) -> No-Value
fail(No-Value) -> No-Value!

## Failure type indicating that an argument to a meta-node is of an
## incorrect type.

&(Type-Error%) -> Type-Error
fail(Type-Error) -> Type-Error!

## Failure type indicating that an integer could not be parsed from a
## string value.

&(Invalid-Integer%) -> Invalid-Integer
fail(Invalid-Integer) -> Invalid-Integer!

## Failure type indicating that a real number could not be parsed from
## a string value.

&(Invalid-Real%) -> Invalid-Real
fail(Invalid-Real) -> Invalid-Real!

## Failure type indicating that a meta-node was invoked with an
## incorrect number of arguments.

&(Arity-Error%) -> Arity-Error
fail(Arity-Error) -> Arity-Error!

## Failure type indicating that an index into a list or string is out
## of bounds.

&(Index-Out-Bounds%) -> Index-Out-Bounds
fail(Index-Out-Bounds) -> Index-Out-Bounds!


### Export Declarations

/export(fail, fails?, fail-type, fail-type?, ?, !!, !-)

/export(
    No-Value, No-Value!,
    Type-Error, Type-Error!,
    Invalid-Integer, Invalid-Integer!,
    Invalid-Real, Invalid-Real!,
    Arity-Error, Arity-Error!,
    Index-Out-Bounds, Index-Out-Bounds!
)
