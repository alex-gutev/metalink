## Tools

UGLIFYJS = @UGLIFYJS@
tridashc = $(top_builddir)/tridashc


## Paths

srcdir = @srcdir@
top_srcdir = @top_srcdir@
top_builddir = @top_builddir@

VPATH = $(srcdir)
testdir = $(top_srcdir)/test/backends/javascript
module_dir = $(top_srcdir)/modules/


## Building Runtime Library

runtime_sources = runtime/runtime.js \
	runtime/queue.js \
	runtime/functions.js \
	runtime/exports.js

runtime: runtime/tridash.min.js

runtime/tridash.min.js: $(runtime_sources)
	$(UGLIFYJS) --wrap Tridash -m -o $@ $^


## Testing

test_inputs = $(testdir)/tests/states1.js \
	$(testdir)/tests/states2.js \
	$(testdir)/tests/states3.js \
	$(testdir)/tests/cycles.js \
	$(testdir)/tests/cycles2.js

check: $(testdir)/runtime/tridash.js $(test_inputs)
	cd $(testdir); npm test

$(testdir)/runtime/tridash.js: runtime/tridash.min.js
	cp $< $@
	echo "module.exports=Tridash;" >> $@


## Installation

install: runtime/tridash.min.js
	install -m 644 $< $(installdir)/backends/javascript


## Cleaning

clean: $(test_inputs:.js=.clean)
	rm -f runtime/tridash.min.js
	rm -f $(testdir)/runtime/tridash.js


## Phony Targets

.PHONY: check clean install



## Test Program Rules

%.js: %.trd $(tridashc)
	TRIDASH_MODULE_PATHS=$(module_dir) \
	$(tridashc) $< -o $@ -p JS_RUNTIME_PATH=runtime/tridash.min.js

%.clean:
	rm -f $(@:.clean=.js)
